************
数值和表达式
************
Groovy中每一个事务最终都被当作某些类的一个实例对象。如整数123实际上是Integer类的一个实例。因此可以在Groovy环境中，可以使用123.abc()表达式调用abs方法来获得整数对象的绝对值。

数值
====
Groovy支持整数和浮点数。整数都是Integer类的实例。浮点数都是 BigDecimal类的实例。

表达式
======
表达式由运算符和操作数组成。 ``+，-，*，/`` 操作符对应的方法是 ``plus，minus，multiply，divide`` 。

不管是整数组合，还是整数和浮点数组合，除法运算通常都会得到相同的结果。如：

.. code-block:: java

    13.0 / 5
    13 / 5.0
    13 / 5
    //结果都是为：2.6

为了获得两个整型值相除的整数部分，必须调用 ``intdiv`` 方法：

.. code-block:: java

    13.intdiv(5)// 结果是2

使用取模运算符(%)可以得到两个整数操作数相除的余数，如：

.. code-block:: java

    13 % 5 // 结果为3
    15 % 5 // 结果为0

.. note:: 对一个浮点数求模，或者对一个含有浮点数参数的整数求模都是非法的。如 ``13.0 % 5`` 、 ``13 % 5.0`` 。

运算符优先级
============
先乘除和取模然后是加减运算。可以使用圆括号改变表达式的优先级。

赋值
====
将某个数组赋给一个变量。赋值语句的最简单形式是：

.. code-block:: java

    variable = expression

当在脚本中第一次使用某个变量时，需要使用Groovy关键字def，其用途是声明变量。但是，在后续的赋值过程中再次使用这个变量时，就不需要再次使用这个关键字了。

.. code-block:: shell

    def count = 0 // 声明并初始化变量
    count = count + 1 // 在当前值的基础上加1

在Groovy中，标识符的命名规则如下：

.. note:: 标识符必须是由字母和数字组成，对大小写敏感，标识符的首字符必须是字母。下划线允许出现在标识符中，以字母看待，标识符绝对不允许是Groovy的关键字。

自增和自减运算符
================
自增和自减运算符可以通过调用 ``next`` 方法来实现。因此， ``x++`` 和 ``x.next()`` 的功能是一样的，同样，自减运算符可以通过调用 ``previous`` 方法来实现。

对象引用
========
``age`` 变量所引用值的类型是在其运行过程中，而不是在编译时确定的。变量与对象之间的关联关系被称为引用。变量引用了该对象所使用的内存部分。


关系运算符和等于运算符
======================
所有的关系运算符 ``<，<=，>，>=`` 都可以使用 ``compareTo`` 方法代替。而 ``==`` 和 ``!=`` 运算符可以使用 ``equals()`` 方法代替，最后 ``compareTo`` 方法可以使用运算符 ``<=>`` 表示。






