******************
字符串和正则表达式
******************
String(字符串)用来标识文本信息的字符序列。

字符串字面值
============
通过引号将字符串文本封装起来，就可以很容易获得String字面值。Groovy为标识字符串提供了数种不同的方式。如，在Groovy中，可以使用单引号、双引号或者三引号来封装字符串。而且，在Groovy中使用三引号表示的字符串可以包含多行文本。

.. code-block:: java

    '' // 空字符串
    'He said "Hello"!' // 单引号（嵌套双引号）
    "He said 'Hello'!" // 双引号（嵌套单引号）
    """spread // 多行文本使用三引号
    over
    four
    lines"""

使用单引号封装的字符串的值就是所列出字符序列本身。而另外两种形式的字符串的值有可能会进一步被解释。任何包含在解释型字符串中的 ``${expression}`` 都将被求值，其结果是字符串的一部分。

.. code-block:: java

    def age = 25
    'My age is ${age}' // My age is ${age}
    "My age is ${age}" // My age is 25
    """My age is ${age}""" // My age is 25
    "My age is \${age}" // My age is ${age}

字符串索引和索引段
==================
字符串是顺序排列的字符集合，因此可以通过单个字符在字符串中的位置来获取该字符，这就是所谓的索引位置。

.. note:: 可以使用索引来指定单个字符或指定字符集合的位置；使用任一方式都能返回一个字符串值。字符串的索引从零开始，止于该字符串的长度值减1。Groovy同样支持负数索引，但是其顺序是从字符串的末尾开始往前计算。子字符串通常可以使用索引段来表示。使用索引段可以提取字符串的子集。

.. code-block:: java

    def greeting = 'Hello world'
    greeting[4] // o 索引从0开始
    greeting[-1] // d
    greeting[1..2] // el
    greeting[1..<3] // el
    greeting[4..2] // oll
    greeting[4,1,6] // oew

``1..2`` 和 ``1..<3`` 这两种索引段表示方法，这种表示方法也被称为范围。 ``1..2`` 表示索引范围从1开始到2结束，包括边界，也就是2； ``1..<3`` 是不包含边界的索引范围表示方法，表示索引范围从1开始，到小于3的整数结束。

基本操作
========
基本的字符串操作包括两个字符串的合并、字符串的复制，以及计算字符串的长度。 ``minus`` 方法(或者重载运算符-)的作用是删除首次出现的子字符串。 ``count`` 方法统计某个子字符串出现的次数，而 ``contains`` 方法则用来判断某个字符串是包含指定的子字符串。

.. code-block:: java

    def greeting = 'Hello world'
    'Hello' + 'world' // Hello world 相当于 "Hello".plus("world")
    'Hello'*3 // HelloHelloHello
    greeting-'o world' // Hell
    greeting.size() // ll
    greeting.length() //ll
    greeting.count('o') //2
    greeting.contains('ell') // true

Groovy字符串是不可变的，它们在任何地方都不可能改变。可以通过索引、索引段以及合并其他字符串的方式创建一个新 ``String`` 对象。因此， ``greeting-'o world'`` 表达式演示了新 ``String`` 对象 ``'Hell'`` 的产生过程，但字符串对象 ``greeting`` 本身仍没有变化。

字符串方法
==========
Groovy通过包含附加方法的方式扩展了Java开发工具(JDK)中的类。Java类String包含如concat、endsWith以及length等在内的一些方法。

+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| 方法名称            | 函数原型说明                                                                                                                             |
+=====================+==========================================================================================================================================+
| center              | String center(Number numberOfChars) 返回一个长度为numberOfChars、其左边和右边均使用空格填充的新字符串                                    |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| center              | String center(Number numberOfChars, String padding) 返回一个长度为numberOfChars、其左边和右边均使用padding填充的新字符串                 |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| compareToIgnoreCase | int compareToIgnoreCase(String str) 按字典顺序比较两个字符串，忽略大小写                                                                 |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| concat              | String concat(String str) 在当前字符串后加上str字符串                                                                                    |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| eachMatch           | void eachMatch(String regex, Closure clos) 判断给定字符串的子字符串是否与正则表达式regex匹配。传递给闭包的对象是一个匹配成功的字符串数组 |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| endsWith            | Boolean endsWith(String suffix) 测试字符串是否以给定的后缀结尾                                                                           |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| equalsIgnoreCase    | Boolean equalsIgnoreCase(String str) 将当前字符串和另一个字符串相比较，忽略大小写                                                        |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| getAt               | String getAt(int index) String getAt(IntRange range) String getAt(Range range) 字符串的下标运算                                          |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| indexOf             | int indexOf(String str) 返回给定子字符串在当前字符串中首次出现的索引值                                                                   |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| leftShift           | StringBuffer leftShift(Object value) 重载leftShift操作符，以提供一种将多个字符串对象相加，并返回一个新字符串的更为简单的方法             |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| length              | int length() 返回字符串的长度                                                                                                            |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| matches             | Boolean matches(String regex) 告诉字符串是否匹配给定正则表达式                                                                           |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| minus               | String minus(Object value) 删除字符串中的value部分                                                                                       |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| next                | String next() 此方法被String类的++操作符调用，它用来增加给定字符串的最末位字符                                                           |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| padLeft             | String padLeft(Number numberOfChars) 在字符串的左侧使用空格字符填充                                                                      |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| padLeft             | String padLeft(Number numberOfChars, String padding) 在字符串的左侧使用padding填充                                                       |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| padRight            | String padRight(Number numberOfChars) 在字符串的右侧使用空格字符填充                                                                     |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| padRight            | String padRight(Number numberOfChars, String padding) 在字符串的右侧使用padding填充                                                      |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| plus                | String plus(Object value) 字符串相加                                                                                                     |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| previous            | String previous() 此方法被String类的--操作符调用，它用来删除给定字符串的最末位字符                                                       |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| replaceAll          | void replaceAll(String regex, Closure clos) 替换所有与正则表达式相匹配的闭包中的文本值                                                   |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| reverse             | String reverse() 创建当前字符串的逆序字符串                                                                                              |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| size                | int size() 返回字符串长度                                                                                                                |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| split               | String[] split(String regex) 使用与给定的正则表达式相匹配的子字符串分隔为多个字符串                                                      |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| substring           | String substring(int beginIndex) 返回一个值为当前字符串的子字符串的新字符串                                                              |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| substring           | String substring(int beginIndex,int endIndex) 返回一个值为当前字符串的子字符串的新字符串                                                 |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toCharacter         | Character toCharacter()                                                                                                                  |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toDouble            | Double toDouble()                                                                                                                        |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toFloat             | Float toFloat()                                                                                                                          |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toInteger           | Integer toInteger()                                                                                                                      |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toLong              | Long toLong() 字符串类型转换                                                                                                             |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toList              | List toList() 将给定的字符串转换成一个由单个字符组成的字符串列表                                                                         |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toLowerCase         | String toLowerCase() 将当前字符串对象的所有字符转换为小写                                                                                |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| toUpperCase         | String toUpperCase() 将当前字符串对象的所有字符转换为大写                                                                                |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| tokenize            | List tokenize() 使用空格作为字符串的分隔符                                                                                               |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+
| tokenize            | List tokenize(String token) 使用给定的token参数作为字符串的分隔符                                                                        |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------+

例子：

.. code-block:: java

    //String center(Number numberOfChar)  返回一个长度为numberOfChar，其左边和右边均使用空格的填充的新字符串。
    def str = "demo"
    assert str.center(6) == " demo "
    assert str.center(6).size() == 6
    assert str.center(5) ==  "demo "    //如果numberOfChar比字符串长度大1.那么在原字符串后添加一个空格。

    //String center(Number numberOfChar，String padding)  返回一个长度为numberOfChar，其左边和右边均使用padding的填充的新字符串，与上一个一致：如果第一个参数比字符串长度大1，在元字符串后添加padding
    assert str.center(5,"a") == "demoa"
    assert str.center(7,"ab") == "ademoab"      //先在元字符串后添加padding的前一个字符，再在原字符串前添加padding的前一个字符。然后在新字符串后添加padding的第二个字符，以此类推。

    //int compareToIgnoreCase(String str) 按字典大小比较两个字符串，忽略大小写，返回他们的顺序差值
    def str = "a"
    assert str.compareToIgnoreCase("a") == 0    //相同返回0
    assert str.compareToIgnoreCase("A") == 0    //忽略大小写
    assert str.compareToIgnoreCase("c") == -2   //返回差值

    //Boolean equalsIgnoreCase(String str) 判断两个字符串是否相等，忽略大小写

    //String getAt(int index)   字符串的下标运算符
    assert "abcdefg".getAt(2) == "c"
    assert "abcdefg"[2] == "c"
    assert "abcdefg".getAt(1..2) == "bc"    //String getAt(Range range)
    assert "abcdefg"[1..2] == "bc"

    //Int indexOf(String str) 返回给定子字符串在当前字符串中首次出现的索引值
    assert "abcdefg".indexOf("b") == 1
    assert "abcd".indexOf("g") == -1    //如果原字符串中不存在给定子字符串就返回-1

    //StringBuffer leftShift(Object value)  重载<< 使两个字符串相加，返回一个新的字符串
    assert "ab".leftShift("cd").class ==  java.lang.StringBuffer
    assert "ab".leftShift("cd").toString() == "abcd"

    //int length() / int size()   返回字符串的长度
    assert "abcd".length() == 4
    assert "abcd".size() == 4

    //String concat(String str) 在字符串后添加str字符串
    assert "ab".concat("12") == "ab12"

    //Boolean endsWith(String suffix) 测试字符串是否以给定的后缀结尾
    assert "demo1".endsWith("1") == true

    //String minus(Object value) 删除字符串中value部分
    assert "abcd".minus("bc") == "ad"

    //String next()  按字典顺序增加给定字符串末尾字符顺序
    assert "abcd".next() == "abce"
    assert "abc1".next() == "abc2"

    //String previous() 按字典顺序增加给定字符串末尾字符顺序
    assert "abcd".previous() == "abcc"
    assert "abc1".previous() == "abc0"


    //String padLeft(Number numberOfCharacters) 与center()用法类似，在元字符串左边填充空格字符
    assert "abcd".padLeft(5) == " abcd"
    //String padLeft(Number numberOfCharacters，String padding) 与center()用法类似，在元字符串左边填充padding字符
    assert "abcd".padLeft(5,"12") == "1abcd"
    //String padRight(Number numberOfCharacters) 与padLeft()用法类似，在元字符串左边填充空格字符
    assert "abcd".padRight(5) == "abcd "
    //String padRight(Number numberOfCharacters，String padding) 与padLeft()用法类似，在元字符串左边填充padding字符
    assert "abcd".padRight(5,"12") == "abcd1"

    //String plus(Object valus) 字符串相加
    assert "abcd".plus("123") == "abcd123"

    //String reverse() 创建当前字符串的逆序字符串
    assert "abcd".reverse() == "dcba"

    //String substring(int beginIndex) 返回一个当前字符串的指定索引开始的子字符串
    assert "abcd".substring(1) == "bcd"
    //String substring(int beginIndex,int endIndex) 返回一个当前字符串的指定索引开始的子字符串
    assert "abcd".substring(1,2) == "bc"
    //Character toCharacter()
    //Double toDouble()
    //Float toFloat()
    //Integer toInteger()
    //Long toLong() 字符串类型转换
    //List toList() 将指定的字符串转换成一个由单个字符组成的字符串列表
    assert "abcd".toList() == ["a","b","c","d"]

    //String toUpperCase() 将当前字符串对象的所有字符转换为大写
    assert "abcd".toUpperCase() == "ABCD"
    //String toLowerCase() 将当前字符串对象的所有字符转换为小写
    assert "ABCD".toUpperCase() == "abcd"
    //List tokenize()  使用空格作为字符串的分隔符
    //List tokenize(String token) 使用指定的token参数作为字符串的分隔符
    //String[] split(String regex) 使用与给定的正则表达式相匹配的子字符串将字符串分隔为多个字符串
    // Boolean matches(String regex) 测试字符串是否匹配给定子字符串

Tokenize 方法能将某个字符串分隔为一个字符串列表。该方法的第一个版本使用空格符作为分隔符，第二个版本使用给定的 String 参数作为分隔符。 Split 方法基于与正则表达式的匹配情况，对字符串进行分隔，并返回一个字符串数组。

tokenize() vs split()
1.split()返回string[]， tokenize()返回list
2.tokenize()忽略空字符串

.. code-block:: java

    String testString = 'hello brother'
    assert testString.split() instanceof String[]
    assert ['hello','brother']==testString.split() //split with no arguments
    assert['he','','o brother']==testString.split('l')

    assert testString.tokenize() instanceof List
    assert ['hello','brother']==testString.tokenize() //tokenize with no arguments
    assert ['he','o brother']==testString.tokenize('l')

3.tokenize()使用字符串内的所有字符

.. code-block:: java

    String  testString1='hello world'
    assert ['hel',' world']==testString1.split('lo')
    assert ['he',' w','r','d']==testString1.tokenize('lo')

4.split()可以使用正则表达式

.. code-block:: java

    String testString2='hello world 123 herload'
    assert['hello world ',' herload']==testString2.split(/\d{3}/)

比较字符串
==========
``str1 == str2`` 等价于 ``str1.equal(str2)`` ； ``str1<=>str2`` 等价于 ``str1.compareTo(str2)`` 。例如：

.. code-block:: java

    'ken'<=>'ken' // 0
    'ken'<=>'kenneth' // -1
    'ken'<=>'Ken' // 1
    'ken'.compareTo('Ken') // >0

正则表达式
==========
String 类提供了多个允许使用正则表达式对 String 对象执行操作的方法。 Groovy 支持使用 ``~"regex"`` 来定义正则表达式。双引号中的文本表示正则表达式。通过下面的方法可以创建一个正则表达式：

.. code-block:: java

    def regex =~'cheese'

在if语句或者while语句中，当Groovy操作符 ``=~`` 作为一个谓词出现时，左边的操作数String对象将和右边的正则表达式匹配。下面所有表达式的结果均为true：

.. code-block:: java

    'cheesecake' =~'cheese'
    !('cheesecake' =~'fromage')
    'cheesecake' =~regex

精确匹配符 ==~ 需要精确匹配。因此，下面表达式结果为false：

.. code-block:: java

    'cheesecake' ==~'cheese'

在正则表达式中，有两个特殊的位置标识符，它们是脱字符号(^)和美元符号($)，分别表示某行的开始和结尾：

.. code-block:: java

    def rhyme = 'Humpty Dumpty sat on a wall'
    rhyme =~'^Humpty' // true
    rhyme =~'Wall$'  // true

在正则表达式中，点符号(.)能代表任意字符，因而称其为通配符。这样，需要匹配一个实际的点字符的时候，事情就会变得非常复杂。

.. code-block:: java

    '3.14'=~'3.14'
    '3X14'=~'3.14'
    '3.14'=~'3\\.14' // 匹配3.14字面字
    !('3X14'=~'3\\.14')

使用反斜杠字符时要加倍小心。在普通的String对象中出现时，通常被当做转义字符，因此 ``\\`` 表示单个的反斜杠字符。这样，在正则表达式中需要使用 ``\\\\`` 来表示一个反斜杠字符。使用四个反斜杠字符来表示一个反斜杠字符的方法通常会使人困惑不解。



