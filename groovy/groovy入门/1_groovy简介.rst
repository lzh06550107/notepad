********
groovy简介
********

Groovy是增强Java平台的唯一的脚本语言。它提供类似于Java的语法，内置映射(Map)、列表(List)、方法、类、闭包(closure)以及生成器。Groovy语言具有动态的弱类型，以及对Java应用程序接口(API)的无缝访问，因此非常适合用于开发小型和中型应用程序。

为什么使用脚本语言
==================
与Java这样的系统编程语言相比，脚本语言具有更好的表示能力，能够提供更高的抽象等级。这通常会提供更快捷的应用程序开发能力，以及更高的编程生产力。但是，脚本语言和系统编程语言的目标是不同的。脚本语言用于把应用程序集成起来，而不是实现复杂的数据结构和算法。因此，为了保证实用性，脚本语言必须能够访问不同类型的组件？？

通常，脚本语言不会替代系统编程语言，它们相互补充。一般来说，系统编程语言应该用于如下目的：

- 开发复杂的算法或者数据结构；
- 实现计算密集型应用；
- 操作大型数据集；
- 实现良好定义的、缓慢变更的需求；
- 是大型项目的一部分；

但是，脚本语言应该被用于如下目的：

- 连接已有的组件；
- 处理经常变化的多种类型的实体；
- 具有图形化用户界面；
- 拥有快速变化的功能；
- 是小型或者中型项目的一部分；

相对于系统编程语言，脚本语言的主要长处是所需的编码工作量相对少。通常，系统编程语言的代码看起来非常复杂，难以维护。这是因为系统编程语言的代码需要大量的模板或者转换代码。

系统编程语言是强类型的，能够确保代码的安全性和健壮性。在强类型语言中，变量必须被指定为一种类型，只能按照固定方式使用。尽管强类型特性使得大型程序的可管理性更好，并且允许编译器（静态地）检测特定类型的错误，但可能有时候起不到类型安全保护作用。比如，当事先很难或者不可能决定变量的类型时，强类型是没有用处的。当连接组件时，这种情况会经常发生。

为简化组件连接任务，脚本语言被设计成弱类型。这意味着，在不同环境下，变量可以以多种方式使用。但是，当代码被实际执行时，才会检测变量是否被非法使用。比如，尽管 Groovy 在编译时（静态地）检查程序的语法，（动态地）检测方法调用是否正确发生在运行时。最终结果是，正确编译的 Groovy 脚本在运行时也许会抛出异常，甚至导致非正常结束。

弱类型并不意味着代码是不安全的，或者不健壮。极限编程（Beck, 2004）已经成为一种软件开发方法。这个方法注重测试，使用全面的单元测试方案（Link, 2003）来驱动开发过程。通过在不同环境下执行所编写的代码，就可以保证代码的安全性和健壮性。当开发 Groovy 脚本时，单元测试应该是基础的开发过程。实际上，开发经验已经证明，在弱类型语言中，综合运用弱类型和单元测试通常比传统系统编程语言的强类型检测更好。这样的话，就同时拥有弱类型的灵活性和单元测试的全面保障。

为什么使用Groovy
================
Java 编译器会产生可以在 Java 虚拟机上运行的字节码。 Groovy 类和 Java 是二进制兼容的。这意味着， Groovy 编译器产生的字节码与 Java 编译器产生的字节码是完全一样的。因此，对 JVM 而言， Groovy 和 Java 是完全一样的。这就等于说， Groovy 能够完全使用各种 Java API ，诸如用于数据库开发的 JDBC （Fisher et al., 2003），以及用于开发 GUI 应用程序的 Swing （Topley, 1998）。

Groovy 的目标是把大量开发者需要做的工作让语言本身来实现。比如，当往 GUI 添加一个按钮时，只需要提供当按钮被单击时要执行的代码，无需给这个按钮添加一个事件处理器，作为实现特定接口的类的实例。 Groovy 就是这样做的。

Groovy 是一种面向对象的脚本语言，其中涉及的所有事物都是对象，这一点不像 Java 语言。这样就可以实现语言语法的一致性。 Groovy 也是动态类型语言，类型标记存在于对象中，而不是由引用它的变量来决定。这样做的结果是， Groovy 不要求声明变量的类型、方法的参数，或者方法的返回值。这样一来，就可以大大缩短代码规模，并允许程序员把类型决定时间推迟到代码运行时。

通过提供概念“属性”(property)， Groovy 也尝试统一类中的实例字段和方法。属性概念可以消除实例字段（attribute）和方法之间的差别。结果是，客户端可以把一个属性认为是实例字段及其获取器/设置器(getter/setter)方法的组合。

重要的数据结构，比如 Map 和 List ，都是 Groovy 语言内置的。可以使用 Groovy 脚本直接表示一个 List 对象或者 Map 对象。对于开发新手来说，直接实现 List 和 Map 对象会让编程任务更加简单。 List 和 Map 对象都提供 interator （迭代器）方法，比如 each ，可以简化处理这些集合中每个元素的过程。可以使用一个 closure (闭包)来声明处理过程，闭包是表示一个代码块的对象。这是个非常有价值的结构，可以被变量引用，带参数，被作为参数传入方法或者其他闭包，也可以是类的实例字段。在 Groovy 编程中，闭包具有举足轻重的地位。

层次性数据结构，比如 XML ，也可以直接使用 Groovy 生成器所生成的 Groovy 脚本来表示。借助于 XPath  (http:// www.w3.org/TR/xpath20/)中的标记， Groovy 可以快速地表示这些结构的路径，以及引用不同部分的方法。同样，迭代器和闭包提供处理它们的机制。

通常， Groovy 生成器适用于任何被嵌套的树型结构。比如，它们可以被用于描述使用多种组件组装而成的图形化应用程序。闭包可以充当组件（比如菜单项和按钮）的事件处理器。标准查询语言(SQL)的处理过程也是规范统一的。迭代器方法，比如 eachRow ，可以与一个闭包一起表示如何处理数据库表中的数据行。

