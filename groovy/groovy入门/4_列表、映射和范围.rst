****************
列表、映射和范围
****************

列表和映射能够引用不同类型的对象，范围则表示整型值的集合。列表和映射能够动态地增长。列表中的每个对象都由一个整型值索引来指定；而映射集合则能够通过任意类型的值进行索引。由于这些集合所包含对象的类型是随意的，列表中的元素有可能是一个映射，映射中的元素也有可能是一个列表。这样，就可以构造出任意复杂的数据结构。

列表
====
列表时一种用来存储数据项集合的数据结构。在Groovy中，列表可以有序地保存所引用的对象。列表中对象所占用的位置也是有序的，并且能够通过一个整数索引来标识。列表字面值是一系列包含在方括号中的对象集合，这些对象用逗号分隔。

.. code-block:: java

    [11,12,13,14] // 整型值列表
    ['Ken','John','Andrew'] // 字符串列表
    [1,2,[3,4],5] // 嵌套列表
    ['Ken',21, 1.69] // 含有不同类型对象的列表
    [] // 空列表

为了处理列表中的数据，必须能够访问列表中的单个元素。Groovy列表使用索引操作符[] 来标识元素值。列表的索引从0开始，它指向列表的第一个元素。下面是名为numbers的列表对象和访问列表元素的一些简单范例：

.. code-block:: java

    def numbers = [11,12,13,14] // 列表含有四个元素
    numbers[0] // 11
    numbers[3] // 14

    // 如果整型索引为负数，则其引用的元素从列表末端开始向前移动，因此
    numbers[-1] // 14
    numbers[-2] // 13

    // 索引段同样也可以用于列表，比如：
    [11,12,13,14][2] // 13

.. note:: []操作符就是List类中定义的getAt方法。因此，当使用numbers[3]引用列表元素时，必须认识到，实际上是List对象numbers调用了getAt方法，其参数为3，即numbers.getAt(3)。

另外，也可以通过索引范围来操作列表。包含边界的索引范围如 start..end ，它将产生一个新的列表对象，其初始值从原始列表对象的start索引位置开始，到原始列表对象的end索引位置结束。而不包含边界的索引范围如 start..<end 所示，其值不包含列表中 end 索引位置的元素。一些使用范围索引的范例如下所示：

.. code-block:: java

    numbers[0..2] // 返回列表[11,12,13]
    numbers[1..<3] // 返回列表[12,13]

使用列表的索引操作符同样也能够为列表赋新值。赋值语句右侧的值将替换赋值语句左侧给定的索引位置的元素值，索引值只能是一个整型表达式；如果赋值语句右侧本身就是一个列表对象，则使用列表对象替换左侧的索引元素值。

.. code-block:: java

    numbers[1] = 22 // 返回列表[11,22,13,14]
    numbers[1] = [33,44] // 返回列表[11,[33,44],13,14]

putAt方法提供了赋值语句的功能。

通过<<运算符(即 leftShift 方法)，可以把一个新元素值追加到列表的最后。如：

.. code-block:: java

    numbers << 15 // 返回列表[11,[33,44],13,14,15]

    //使用+操作符(即plus)可以连接两个列表
    numbers = [11,12,13,14]
    numbers + [15,16] // 返回列表[11,12,13,14,15,16]

    // -操作符(即minus)从列表中删除元素
    numbers = [11,12,13,14]
    numbers - [13] // 返回列表[11,12,14]

列表方法
========
在Groovy中，借助List类提供的方法，可以使列表运算变得较为容易。使用List类可以大大减少操作列表的应用程序编程量。

+-----------+----------------------------------------------------------------------------------------------------------+
| 方法名称  | 函数原型和说明                                                                                           |
+===========+==========================================================================================================+
| add       | boolean add(Object value) 在当前列表末尾追加一个新值                                                     |
+-----------+----------------------------------------------------------------------------------------------------------+
| add       | void add(int index, Object value) 在当前列表给定索引位置插入一个新值                                     |
+-----------+----------------------------------------------------------------------------------------------------------+
| addAll    | boolean addAll(Collection values) 在当前列表末尾追加values值                                             |
+-----------+----------------------------------------------------------------------------------------------------------+
| contains  | boolean contains(Object value) 如果该列表包含给定值则返回true                                            |
+-----------+----------------------------------------------------------------------------------------------------------+
| flatten   | List flatten() 使当前列表元素形式一致，并返回一个新列表                                                  |
+-----------+----------------------------------------------------------------------------------------------------------+
| get       | Object get(int index) 返回当前列表中指定位置的元素值                                                     |
+-----------+----------------------------------------------------------------------------------------------------------+
| getAt     | Object getAt(int index) 返回当前列表中指定位置的元素值                                                   |
+-----------+----------------------------------------------------------------------------------------------------------+
| getAt     | List getAt(Range range) 返回一个新列表，其值为当前列表中给定范围的子列表                                 |
+-----------+----------------------------------------------------------------------------------------------------------+
| getAt     | List getAt(Collection index) 返回一个新列表，其值为原始列表和输入列表的所有元素                          |
+-----------+----------------------------------------------------------------------------------------------------------+
| isEmpty   | boolean isEmpty() 如果当前列表没有任何元素则返回true                                                     |
+-----------+----------------------------------------------------------------------------------------------------------+
| leftShift | Collection leftShift(Object value) 重载左移运算符，提供一个向列表添加新值的简单方法                      |
+-----------+----------------------------------------------------------------------------------------------------------+
| minus     | List minus(Collection collection) 生成一个新列表，其元素由原始列表中那些不包含在collection参数中的值组成 |
+-----------+----------------------------------------------------------------------------------------------------------+
| plus      | List plus(Object value) 生成一个新列表，其元素由原始列表中的元素和Value参数值组成                        |
+-----------+----------------------------------------------------------------------------------------------------------+
| plus      | List plus(Collection collection) 生成一个新列表，其元素由原始列表中的元素和给定的collection参数组成      |
+-----------+----------------------------------------------------------------------------------------------------------+
| pop       | Object pop() 删除当前列表中最后一个值元素                                                                |
+-----------+----------------------------------------------------------------------------------------------------------+
| putAt     | void putAt(int index, Object value) 赋值语句的左侧支持下标运算符                                         |
+-----------+----------------------------------------------------------------------------------------------------------+
| remove    | Object remove(int index) 删除当前列表中给定位置的元素                                                    |
+-----------+----------------------------------------------------------------------------------------------------------+
| remove    | boolean remove(Object value) 删除在当前列表中首次出现的给定元素                                          |
+-----------+----------------------------------------------------------------------------------------------------------+
| reverse   | List reverse() 生成一个新列表，其值为原始列表的元素的倒序                                                |
+-----------+----------------------------------------------------------------------------------------------------------+
| size      | int size() 获得当前列表的元素个数                                                                        |
+-----------+----------------------------------------------------------------------------------------------------------+
| sort      | List sort() 返回原始列表所有元素的排序副本                                                               |
+-----------+----------------------------------------------------------------------------------------------------------+

例子：

.. code-block:: java

    [11,12,13,14].add(15) //返回值为[11,12,13,14,15]
    [11,12,13,14].add(2,15) // 返回值为[11,12,15,13,14]
    [11,12,13,14].add([15,16]) // 返回值为[11,12,13,14,15,16]
    [11,12,13,14].get(1) // 返回值为12
    [11,12,13,14].isEmpty()  // 返回值为false
    [11,12,13,14].size()  // 返回值4
    [11,12,13,14].getAt(1)  // 返回值为12
    [11,12,13,14].getAt(1..2)  // 返回值为[12,13]
    [11,12,13,14].getAt([2,3])  // 返回值为[13,14]
    [11,12,13,14].intersect([13,14,15])  // 返回值为[13,14]
    [11,12,13,14].pop()  // 返回值为14
    [11,12,13,14].reverse()  // 返回值为[14,13,12,11]
    [14,13,12,11].sort()  // 返回值为[11,12,13,14]

    //注意
    def numbers = [11,12,13,14]
    numbers.remove(3)
    numbers.remove(13)

    def names = ['Ken','John','Sally','Jon']
    names.remove(3)
    names.remove('Ken')

第一个remove语句调用remove(int index)方法，而第二个本意是调用remove(Object value)方法，但解释程序还是会调用第一个方法，这样就会导致越界异常。如果列表包含的是字符串，则会正常。

映射
====
映射是一种引用对象的无序集合。映射中的所有元素都可以通过关键字访问，它使用的关键字可以是任意类型的。当向一个映射插入值时，需要同时提供两个参数：关键字及其相应的值。映射字面值，把键值对放在方括号中，并使用逗号分隔。

.. code-block:: java

    ['Ken':'Barclay','John':'Savage'] // 名/姓集合
    [4:[2],6:[3,2],12:[6,4,3,2]]  // 整型关键字及其约数列表
    [:]  // 空映射

    def careful = [1:'Ken','1':'Barclay']
    careful[1]  // Ken
    careful['1']  // Barclay

在映射字面值中，如果某个元素的键是一个变量名，那么它将被解释为一个 ``String`` 值。

.. code-block:: java

    def x = 1
    def y = 2
    def m = [x:y,y:x] // 最终值为 m = ['x':2,'y':1]

映射方法
========
Map类所支持的许多方法使映射对象的处理过程变得非常简单。

+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 方法名称    | 函数原型和说明                                                                                                                                                  |
+=============+=================================================================================================================================================================+
| containsKey | boolean containsKey(Object key) 当前映射是否包含key关键字                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| get         | Object get(Object key) 在当前映射中查询key关键字，并返回与之相对应的值。如果在当前映射中没有与该关键字相对应的值则返回空                                        |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| get         | Object get(Object key, Object defaultValue) 在当前映射中，查询key关键字，并返回与之相应的值。如果在当前映射中没有与该关键字相对应的值，则返回defaultValue默认值 |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| getAt       | Object getAt(Object key) 支持使用下标操作符的方法                                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| keySet      | Set keySet() 获取当前映射的一组关键字                                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| put         | Object put(Object key, Object value) 在当前映射中，使给定的value值和给定的key关键字产生对应关系。如果在该映射中先前已经包含当前关键字的映射，新值将替换旧映射值 |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| putAt       | Object putAll(Object key, Object value) 允许映射使用下标操作符                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| size        | int size() 返回当前映射中关键字与值映射的数目                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| values      | collection values() 返回包含在当前映射中所有值的集合                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+

例子：

.. code-block:: java

    def mp = ['Ken':2745, 'John':2746, 'Sally':2741]
    mp.put('Bob',2713) // [Bob:2713,Ken:2745,Sally:2742,John:2746]
    mp.containsKey('Ken') // true
    mp.get('David', 9999) // 9999
    mp.get('Sally') // 2742
    mp.get('Billy') // null
    mp.keySet()  // [David, Bob, Ken, Sally, John]
    mp.size()  //4
    mp['Ken']  // 2745

请注意values方法返回包含在映射中值的一个集合，通常将其作为一个列表看待比较好。使用下面的代码可以非常容易地实现其功能：

.. code-block:: java

    mp.values().asList()

范围
====
范围是表达特定序列值的一种简略方法。它通过序列中第一个值和最后一个值表示，范围还具有包含和不包含关系。一个具有包含关系的范围，将包含从第一个值开始到最后一个值为止的所有值；而一个具有不包含关系的范围，则包含除了最后一个值之外的所有值。

.. code-block:: java

    1900..1999  // 20世纪(包含边界)
    2000..<2100  // 21世纪(不包含边界)
    'A'..'D'  // A,B,C和D
    10..1  // 10,9....1
    'Z'..'X'  // Z,Y和X

请注意，包含边界的范围通过 ``...`` 表示，而不包含边界的范围则在下边界和上边界之间使用 ``..<`` 。范围可以通过字符串或者整型值表示。

范围的上标和下标同样也可以通过整型表达式表示，如：

.. code-block:: java

    def start = 10
    def finish = 20
    start..finish + 1 // [10,11,12,13,14,15,16,17,18,19,20,21] 先计算在展开

+-----------+-----------------------------------------------------------------------------------------------------------+
| 方法名称  | 函数原型和说明                                                                                            |
+===========+===========================================================================================================+
| contains  | boolean contains(Object obj) 如果当前范围包含给定的元素则返回true                                         |
+-----------+-----------------------------------------------------------------------------------------------------------+
| get       | Object get(int index) 返回当前范围中给定位置的元素值                                                      |
+-----------+-----------------------------------------------------------------------------------------------------------+
| getFrom   | Comparable getFrom() 获取当前范围中下标最小的元素值                                                       |
+-----------+-----------------------------------------------------------------------------------------------------------+
| getTo     | Comparable getTo() 获取当前范围中下标最大的元素值                                                         |
+-----------+-----------------------------------------------------------------------------------------------------------+
| isReverse | boolean isReverse() 当前范围是否为逆序                                                                    |
+-----------+-----------------------------------------------------------------------------------------------------------+
| size      | int size() 返回当前范围中元素个数                                                                         |
+-----------+-----------------------------------------------------------------------------------------------------------+
| subList   | List subList(int fromIndex, int toIndex) 返回当前范围中给定的fromIndex(包含)到toIndex(不包含)之间的所有值 |
+-----------+-----------------------------------------------------------------------------------------------------------+

例如：

.. code-block:: java

    def twentiethCentury = 1900..1999  // Range字面值
    def reversedTen = 10..1  // 逆序范围
    twentiethCentury.size()  // 100
    twentiethCentury.get(0)  // 1900
    twentiethCentury.getFrom()  // 1900
    twentiethCentury.getTo()  // 1999
    twentiethCentury.contains(2000)  // false
    twentiethCentury.subList(0,5) // 1900..1904
    reversedTen.isReverse()  // true
